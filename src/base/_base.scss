@use "sass:math";
@use "../settings/variables";

/* ==================== */
/* == Base
/* ==================== */

/**
 * @note Some improvements taken from Ergonomize.css
 * @author Effeilo
 - @see https://github.com/Effeilo/ergonomize.css/blob/master/ergonomize.css
 * 1. Force scrollbars to always be visible to prevent awkward jumps when
 *    navigating between pages that do/do not have enough content to produce
 *    scrollbars naturally.
 * 3. Smooth scroll
 *    @see https://evilmartians.com/chronicles/scroll-to-the-future-modern-javascript-css-scrolling-implementations
 *    @see https://codepen.io/benfrain/pen/VxeLPb
 * 4. Breathing room to any content automatically scrolled to
*     @author Florens Verschelde (@fvsch)
 *    @see https://twitter.com/fvsch/status/1190277947871105027
 */
html[lang] {
	box-sizing: border-box;
	caret-color: hsl(var(--accent));

	@if variables.$full-width == false {
		overflow-y: scroll; /* 1 */
	}

	position: relative;
	scroll-padding-block: 1vh; /* 3 */

	&:focus-within {
		scroll-behavior: smooth; /*2 */
	}
}

*,
*::after,
*::before {
	box-sizing: inherit;
}

body {
	background: hsl(var(--background));
	color: hsl(var(--muted-dark));
	counter-reset: footnotes;
	font: normal 400 1em/1.5 sans-serif;
	font-family: -apple-system, BlinkMacSystemFont, system-ui, sans-serif;
	min-block-size: 100vh;
	overflow-x: hidden;
	position: relative;
	-webkit-font-smoothing: subpixel-antialiased;
	text-rendering: optimizeSpeed;
}

/**
 * @note Target
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/:target
 */
@keyframes target {
	from {
		background-color: transparent;
		box-shadow: none;
		outline: .125rem solid transparent;
		outline-offset: variables.$gutter * 2;
	}
	to {
		background-color: hsl(var(--contrast));
		box-shadow: 0 0 0 .25rem hsl(var(--contrast));
		outline: .125rem solid hsl(var(--accent));
		outline-offset: .25rem;
	}
}

:target {
	animation: target .3s var(--enter) .3s forwards;
}

/**
 * @note Selection
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/::selection
 */
::selection {
	background-color: hsl(var(--accent));
	color: hsl(var(--background));
	text-shadow: none;
}

/**
 * @note Placeholders
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/::placeholder
 */
::placeholder {
	color: hsl(var(--muted));
}

/**
 * 1. Ensure focus outline contrast
 ** @see https://www.w3.org/WAI/WCAG21/Understanding/non-text-contrast.html#user-interface-components
 * 2. Ensure focus outline visibility by using isolation property
 ** @see https://developer.mozilla.org/fr/docs/Web/CSS/isolation
 ** @note Based on an idea:
 ** @author Manuel Matuzovic
 ** @see https://www.matuzo.at/blog/improving-the-keyboard-accessibility-of-codepen-embeds/#accessibility-improvements
 * 3. Allow to animate outline on focus
 ** @author Heydon Pickering
 ** @see https://www.heydonworks.com/article/shrinking-button-outlines
 * 4. Progressively enhance by using :focus-visible
 ** @see https://developer.paciellogroup.com/blog/2018/03/focus-visible-and-backwards-compatibility/
 */
:focus {
	outline-color: currentColor; /* 1 */
	outline-offset: .25rem; /* 3 */
	isolation: isolate; /* 2 */
}

:focus:not(:focus-visible) { /* 4 */
	outline-color: transparent;
	isolation: auto;
}

:focus-visible { /* 4 */
	outline-color: currentColor; /* 1 */
	outline-offset: .25rem; /* 3 */
	isolation: isolate; /* 2 */
}

/**
 * @note Visually hide programmatically given focus when using a hover capable pointer
 ** @see https://twitter.com/heydonworks/status/594115773871824897
 ** @see https://accessibility.blog.gov.uk/2018/08/01/supporting-users-who-change-colours-on-gov-uk/
 */
body:hover [tabindex="-1"]:focus {
	outline-color: transparent;
	isolation: auto;
}

a {
	color: hsl(var(--secondary));
	outline: .125rem solid transparent;
	outline-offset: variables.$gutter * 2;
	text-decoration-style: dotted;
	text-decoration-skip-ink: auto;
	transition: outline-offset .3s var(--enter);

	&:hover {
		color: hsl(var(--secondary-dark));
		text-decoration-style: solid;
	}

	&:focus {
		color: hsl(var(--secondary-dark));
		text-decoration: none;
	}

	&:active {
		opacity: .75;
		transition: none;
	}
}

/**
 * @note Only to main content links
 */
main a {
	&:visited {
		color: hsl(var(--success-dark));
	}

	&[hreflang]::after {
		content: "\A0[" attr(hreflang) "]";
	}

	&[download]::after,
	&[href^="#"]::before,
	&[href^="tel:"]::before,
	&[target$="blank"]::after,
	&[href^="http:"]::before,
	&[href^="mailto:"]::before {
		content: "";
		display: inline-block;
		margin: 0 .25em 0 0;
	}

	&[download]::after {
		content: "\2b07";
		margin: 0 0 0 .25em;
	}

	&[href^="tel:"]::before {
		content: "\1f4f1";
	}

	&[href^="#"]::before {
		content: "\2693";
	}

	&[target$="blank"]::after {
		content: "\1f5d7";
		margin: 0 0 0 .25em;
	}

	&[href^="mailto:"]::after {
		display: none;
	}

	&[href^="mailto:"]::before {
		content: "\1f4e7";
	}

	&[href^="http:"]::before {
		color: hsl(var(--alert));
		content: "\1f513";
	}

	@media (hover: hover) {
		&[href^="tel:"] {
			color: currentColor;
			pointer-events: none;
			text-decoration: none;

			&::before {
				display: none !important;
			}
		}
	}

	/**
	 * @note Using CSS masks to use colored base64 encoded SVG
	 * @link https://codepen.io/noahblon/post/coloring-svgs-in-css-background-images#css-masks-1
	 */
	@supports (mask-image: url('.')) {
		&[download]::after,
		&[href^="#"]::before,
		&[href^="tel:"]::before,
		&[target$="blank"]::after,
		&[href^="http://"]::before,
		&[href^="mailto:"]::before {
			background: currentColor;
			content: "";
			block-size: .625em;
			mask-repeat: no-repeat;
			mask-position: center center;
			inline-size: .625em;
		}

		&[download]::after {
			mask-image: var(--download);
		}

		&[href^="#"]::before {
			mask-image: var(--anchor);
		}

		&[target$="blank"]::after {
			mask-image: var(--external);
		}

		&[href^="http://"]::before {
			mask-image: var(--unsafe);
		}

		&[href^="mailto:"]::before {
			mask-image: var(--mail);
		}

		@media (hover: hover) {
			&[href^="tel:"]::before {
				mask-image: var(--tel);
			}
		}
	}
}

address {
	font-size: #{math.div(22, 16)}rem;
	font-style: normal;
	padding: 0 0 0 2em;
}

code,
pre,
video,
svg {
	max-inline-size: 100%;
}

[hidden],
[role="alert"]:empty {
	display: none;
}

a,
button {
	touch-action: manipulation;
}

a svg,
button svg {
	pointer-events: none;
}

main {
	margin: 0 auto;
	outline-color: transparent;
}
