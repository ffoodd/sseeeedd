/* ==================== */
/* == Table based Charts
/* ==================== */

.table-charts {
  background: palette( default, contrast );
  border-collapse: separate;
  border-spacing: 0;
  caption-side: bottom;
  empty-cells: hide;
  margin: 1.5em auto;
  overflow: hidden;
  padding: 1em;

  > caption:first-child {
    background: inherit;
    font-style: normal;
    padding: $gutter 0;
  }

  th,
  td {
    border: 0;
    padding: 0;

    &:empty {
      display: none;
    }
  }

  /** Bar charts */
  @supports (grid-template-columns: repeat(var(--scale, 100), minmax(0, 1fr))) {
    &.bar {
      tr {
        display: grid;
        grid-auto-rows: 1fr;
        grid-row-gap: $gutter / 2;
        grid-template-columns: minmax(min-content, em( 200 )) repeat(var(--scale, 100), minmax(0, 1fr)) 10ch;
        transition: opacity .2s map-get( $timing-functions, 'move' );

        th {
          grid-column: 1 / 1;
          margin: $gutter / 2 0 0;
          padding: 0 $gutter 0 0;
          text-align: right;
        }

        td {
          --size: calc(var(--scale, 100) * 100%);
          --position: calc(var(--value, 0) / var(--scale, 100) * 100%);
          background-image: linear-gradient(to right,
            palette( success, dark ),
            palette( dominant ),
            palette( secondary ),
            palette( accent ),
            palette( alert )
          );
          background-position: var(--position) 0%;
          background-size:  var(--size) 100%;
          grid-column: 2 / var(--value, 0);
          margin: $gutter / 2 0 0;
          position: relative;

          span {
            background: inherit;
            -webkit-text-fill-color: transparent;
            -webkit-background-clip: text;
            font-weight: bold;
            left: 100%;
            position: absolute;
          }
        }
      }

      &:hover {
        tr {
          opacity: .75;
        }

        tr:hover {
          opacity: 1;
        }
      }

      @media screen and (min-width: em(480)) {
        caption {
          text-align: initial;
          text-indent: rem( 200 );
        }
      }

      /**
       * @note Custom color palette for WHCM
       * @note Inspired by Greg Whitworth's post
       * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
       */
      @media screen and (-ms-high-contrast: active) {
        td {
          background-image: linear-gradient(to right,
            Window,
            ButtonFace,
            ButtonShadow,
            ButtonText,
            highlight
          );
        }
      }

      &.waterfall {
        @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11 {
          tr:nth-of-type(#{$number}) td {
            grid-column: var(--#{$number - 1}, 0) / var(--value, 0);
          }
        }
      }
    }
  }

  /** Line charts
   * @note 1. calc() in width doesn't work in Firefoxâ€¦
   */
  @supports (clip-path: polygon(0% calc(100% - (var(--1) * 100% / var(--y))))) {
    @media screen and (min-width: em(480)) {
      &.line {
        --offset: calc((100% / var(--x)) / 2);
        padding: calc(#{$width / 2} - #{$gutter * 2}) 0 $gutter;
        position: relative;
        transition:
          background .3s map-get( $timing-functions, 'move' ),
          color .3s map-get( $timing-functions, 'move' );

        &::after,
        &::before {
          bottom: $gutter * 8;
          content: "";
          position: absolute;
          top: 0;
          width: 100%;
        }

        &::before {
          background: linear-gradient(to top, palette( secondary, light ), palette( alert ) 75%);
          clip-path: polygon(
            0% calc(100% - (var(--1) / var(--y) * 100%)),
            var(--offset) calc(100% - (var(--1) / var(--y) * 100%)),
            calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),
            calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),
            calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),
            calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),
            calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),
            calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),
            calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),
            calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),
            calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),
            calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),
            calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
            100% calc(100% - (var(--12) / var(--y) * 100%)),
            100% 100%,
            0% 100%
          );
          z-index: 2;
        }

        &::after {
          --scale: calc(100% / var(--y));
          background: repeating-linear-gradient(to bottom, white, white var(--scale), rgba(0, 0, 0, .25) calc(var(--scale) + #{$gutter / 8}));
          z-index: 1;
        }

        th,
        td {
          font-weight: bold;
          text-align: center;
          width: calc( 100% / var(--x) );
          width: 8.3%; /* 1 */

          &:hover {
            color: palette( secondary );
          }
        }

        th {
          color: palette( dominant, dark );

          &::after {
            background: palette( default, contrast );
            bottom: $gutter * 4;
            content: "";
            height: calc(100% - #{$gutter * 4});
            mix-blend-mode: soft-light;
            opacity: 0;
            position: absolute;
            transition: opacity .3s map-get( $timing-functions, 'move' );
            width: inherit;
            z-index: 3;
          }

          @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {
            &:nth-child(#{$number + 1})::after {
              left: calc(100% / var(--x) * #{$number - 1});
            }
          }

          &:hover::after {
            opacity: .5;
          }
        }

        td {
          line-height: 1.5;

          abbr[title] {
            font-weight: normal;
          }
        }

        &.points {
            &::before {
              clip-path: polygon(
                0% calc(100% - (var(--1) / var(--y) * 100%)),
                var(--offset) calc(100% - (var(--1) / var(--y) * 100%)),
                calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),
                calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),
                calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),
                calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),
                calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),
                calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),
                calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),
                calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),
                calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),
                calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),
                calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
                100% calc(100% - (var(--12) / var(--y) * 100%)),
                100% calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),
                calc((100% / var(--x) * 11) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),
                calc((100% / var(--x) * 10) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--11) / var(--y) * 100%)),
                calc((100% / var(--x) * 9) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--10) / var(--y) * 100%)),
                calc((100% / var(--x) * 8) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--9) / var(--y) * 100%)),
                calc((100% / var(--x) * 7) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--8) / var(--y) * 100%)),
                calc((100% / var(--x) * 6) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--7) / var(--y) * 100%)),
                calc((100% / var(--x) * 5) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--6) / var(--y) * 100%)),
                calc((100% / var(--x) * 4) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--5) / var(--y) * 100%)),
                calc((100% / var(--x) * 3) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--4) / var(--y) * 100%)),
                calc((100% / var(--x) * 2) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--3) / var(--y) * 100%)),
                calc((100% / var(--x) * 1) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--2) / var(--y) * 100%)),
                var(--offset) calc((100% + #{$gutter / 4}) - (var(--1) / var(--y) * 100%)),
                0% calc((100% + #{$gutter / 4}) - (var(--1) / var(--y) * 100%))
              );
              z-index: 2;
            }

            th {
              &::before {
                --height: calc(100% - 8rem);
                --size: #{$gutter};
                background-image: linear-gradient(to top, palette( secondary, light ), palette( alert ) 50%);
                background-position-x: 0;
                background-size: 100% calc(var(--y) * 200%);
                border: 2px solid palette( default, contrast );
                border-radius: 50%;
                box-shadow: 0 0 #{$gutter / 4} rgba(0, 0, 0, .5);
                content: "";
                height: var(--size);
                position: absolute;
                transform: translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0);
                transition: transform .3s map-get( $timing-functions, 'move' );
                width: var(--size);
                z-index: 4;
              }

              @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {
                &:nth-of-type(#{$number + 1})::before {
                  background-position-y: calc((var(--height) - (var(--#{$number}) / var(--y) * var(--height))));
                  left: calc((100% / var(--x) * #{$number - 1}) + var(--offset));
                  top: calc((var(--height) - (var(--#{$number}) / var(--y) * var(--height))));
                }
              }

              &::after {
                mix-blend-mode: difference;
              }

              &:hover {
                &::before {
                  transform: translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0) scale(1.5);
                }

                &::after {
                  opacity: .05;
                }
              }
            }
          }
        }
      }
    }
  }
