/* ==================== */
/* == Charts
 *
 * @note Grid charts based on:
 * @see https://css-tricks.com/css-charts-grid-custom-properties/
 * @author Miriam Suzanne
 **
 * @note
 * 1. 1st column to display legends, fixed width
 * 1. 2nd column is a repeater, creating a subcolumn for each unit in --scale
 * 1. 3rd columns with 6ch width to ensure that 6 characters long values has enough space to not overflow <dl>
 **
 * @note 
 * 2. Clipped value coming from:
 ** @see https://www.ffoodd.fr/le-web-en-kit/
 ** @see http://dabblet.com/gist/08fddf3666c39ebc62ca
 ** @author GaÃ«l Poupard
 **
 * @note
 * 3. SVG patterns inline coming from:
 ** @see http://www.heropatterns.com/
/* ==================== */

.charts-bar {  
  dt {
    color: palette( default );
    float: left;
    padding: 0 $gutter 0 0;    
  }
  
  dd {
    margin: 0;
  }
     
  dd span {
    font-weight: bold;
  }
    
  dd abbr[title] {
    border-bottom: 0;
    font-size: small;
    font-weight: normal;
    text-transform: none;
  }
}

@supports (grid-template-columns: repeat(var(--scale, 100), minmax(0, 1fr))) {
  .charts-bar {
    display: grid;
    grid-auto-rows: 1fr;
    grid-row-gap: $gutter / 2;
    grid-template-columns: minmax(min-content, em( 200 )) repeat(var(--scale, 100), minmax(0, 1fr)) 6ch; /* 1 */
    
    dt {
      grid-column: 1 / 1;
    }
    
    dd {
      --size: calc(var(--scale, 100) * 100%);
      --position: calc(var(--value, 0) / var(--scale, 100) * 100%);
      background-image: linear-gradient(to right, 
        palette( success, dark ),
        palette( dominant ),
        palette( secondary ),
        palette( accent ),
        palette( alert )
      );
      background-position: var(--position) 0%;
      background-size:  var(--size) 100%;
      grid-column: 2 / var(--value, 0);
      position: relative;
      
      span {
        background: inherit;                  /* 2 */
        -webkit-text-fill-color: transparent; /* 2 */
        -webkit-background-clip: text;        /* 2 */
        left: 100%;
        position: absolute;
      }
    }
  }
  
  @media screen and (min-width: em(480)) {
    .charts-bar + figcaption {
      text-indent: rem( 200 );
    }
      
    .charts-bar dt {
      text-align: right;
    }
  }
  
  @media screen and (-ms-high-contrast: active) {
    // Could be useful at some pointy, when a11y nerds will get onto testing :)
  }
}

.charts-pie {
  align-items: flex-end;
  background-color: inherit;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin: 0 auto;
  position: relative;

  dt {
    color: var(--color, currentColor);  
    position: relative;
    z-index: 2; 
    
    &::before {
      background: currentColor;
      content: "";
      display: inline-block;
      height: 1rem;
      transform: translate3d(-.2rem, .1rem, 0);
      width: 1rem;
    }
    
    + dd {
      color: var(--color, currentColor);
      font-size: small;
      padding: 0 $gutter 0 $gutter / 4;
      position: relative;
      z-index: 2;
    }
  }
  
  dd {
    margin: 0;
  }
  
  dd[role="presentation"] {
    display: none;
  }
}

@supports (--position: calc(var(--start, 0) * .01turn)) {
  @media screen and (min-width: em(480)) {
    .charts-pie {
      padding-top: calc(#{$width / 2} - #{$gutter * 2});
      
      &::after {
        content: "";
        background: inherit;
        clip-path: circle(var(--offset, 5rem));
        height: calc(#{$width / 2} - #{$gutter * 2});
        left: 50%;
        margin: auto;
        position: absolute;
        top: 50%;
        transform: translate3d(-50%, -50%, 0);
        width: calc(#{$width / 2} - #{$gutter * 2});
      }
      
      + figcaption {
        text-align: center;
      }
      
      dt + dd {    
        &::before {
          content: " (";
          speak: none;
        }
        
        &::after {
          content: ")";
          speak: none;
        }
      }
      
      dd[role="presentation"] {
        --position: calc(var(--start, 0) * .01turn);
        clip-path: circle(50% at 0% 50%);
        display: block;
        height: 100%;
        left: 50%;
        overflow: hidden;
        position: absolute;
        top: 0;
        transform: rotate(var(--position));
        transform-origin: left center;
        transition: transform .2s ease-in-out;
        width: calc(#{$width / 4} - #{$gutter * 2});
        
        &::before {
          --position: calc(var(--value, 0) * .01turn + 1deg);
          background: var(--color, currentColor);
          content: "";
          height: inherit;
          left: -100%;
          position: inherit;
          top: 0;
          transform: rotate(var(--position));
          transform-origin: right center;
          width: 100%;
        }
      }
      
      dd:hover + dd[role="presentation"],
      dt:hover + dd + dd[role="presentation"] {
        transform: rotate(var(--position)) scale(1.05);
      }
      
      @each $name, $pattern in $patterns {
        $i: index($patterns, ($name $pattern));
        
        dt:nth-of-type(#{$i})::before,
        dt:nth-of-type(#{$i}) + * + dd[role="presentation"]::before  {
          background-image: url($pattern); /* 3 */
          background-blend-mode: soft-light;
        }
      }
    }
    
    .charts-pie.no-donut::after {
      display: none;
    }
    
    .charts-pie.polar {
      dd[role="presentation"] {
        --scale: calc(var(--value) / 50);
        transform: rotate(var(--position)) scale(var(--scale));
      }
      
      dd:hover + dd[role="presentation"],
      dt:hover + dd + dd[role="presentation"] {
        --scale: calc(var(--value) / 50 * (1 + (50 - var(--value)) / 100));
        transform: rotate(var(--position)) scale(var(--scale));
      }
    }
  }
  
  @media screen and (-ms-high-contrast: active) and (min-width: em(480)) {
    // Could be useful at some pointy, when a11y nerds will get onto testing :)
  }
}

.charts-line {
  display: grid;
  grid-template-columns: repeat(var(--x), minmax(min-content, 1fr));
  grid-template-rows: 1fr 1fr;
  padding-top: calc(#{$width / 2} - #{$gutter * 2});
  position: relative;
  
  &::before {
    background: linear-gradient(to top, blue, red);
    bottom: $gutter * 3;
    clip-path: polygon(
      0% calc(100% - (var(--1) * 100% / var(--y))),
      calc(100% / var(--x) * 1) calc(100% - (var(--2) * 100% / var(--y))),
      calc(100% / var(--x) * 2) calc(100% - (var(--3) * 100% / var(--y))),
      calc(100% / var(--x) * 3) calc(100% - (var(--4) * 100% / var(--y))),
      calc(100% / var(--x) * 4) calc(100% - (var(--5) * 100% / var(--y))),
      calc(100% / var(--x) * 5) calc(100% - (var(--6) * 100% / var(--y))),
      calc(100% / var(--x) * 6) calc(100% - (var(--7) * 100% / var(--y))),
      calc(100% / var(--x) * 7) calc(100% - (var(--8) * 100% / var(--y))),
      calc(100% / var(--x) * 8) calc(100% - (var(--9) * 100% / var(--y))),
      calc(100% / var(--x) * 9) calc(100% - (var(--10) * 100% / var(--y))),
      calc(100% / var(--x) * 10) calc(100% - (var(--11) * 100% / var(--y))),
      100% calc(100% - (var(--12) * 100% / var(--y))),
      100% 100%, 
      0% 100%
    );
    content: "";
    position: absolute;
    top: 0;
    width: 100%;
  }
  
  dt {
    grid-row: 1 / 1;
  }
  
  dd {
    grid-row: 2 / 2;
  }
}

