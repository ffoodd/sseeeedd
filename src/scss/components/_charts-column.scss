/* ==================== */
/* == Column Charts
 *
 * @note Grid charts based on:
 * @see https://css-tricks.com/css-charts-grid-custom-properties/
 * @author Miriam Suzanne
/* ==================== */

@supports (display: contents) {
  &.column {
    --gap: #{$gutter / 2};
    --size: calc(var(--scale, 100) * 100%);
    --width: calc(#{$width} / var(--y) - #{$gutter});
    display: grid;
    grid-auto-columns: 1fr;
    grid-column-gap: var(--gap);
    grid-template-rows: repeat(var(--scale, 100), minmax(0, .25rem)) minmax(min-content, 2rem);
    max-height: $width;
    position: relative;

    td,
    th {
      margin: 0;
    }

    tr > * + * {
      text-align: center;
    }

    /**
     * @note Use display: contents to place table-cells in table's grid
     * @link https://hiddedevries.nl/en/blog/2018-04-21-more-accessible-markup-with-display-contents
     * @link https://bitsofco.de/how-display-contents-works/
     */
    tr,
    tbody,
    thead {
      display: contents;
    }

    tbody th {
      grid-row: -6 / -3;
      grid-column: 1;
      line-height: 1;
    }

    thead * {
      grid-row: -2;
    }

    caption {
      grid-column: 1 / span var(--y);
      grid-row: -1;
    }

    tbody td {
      --position: calc(var(--value, 0) / var(--scale, 100) * 100%);
      background-blend-mode: hard-light;
      background-position: 0% var(--position), center;
      background-size: 100% var(--size), $gutter;
      grid-row: calc( 100 - var(--value) ) / -3;
      pointer-events: none;
      position: relative;
      transition: opacity .2s map-get( $timing-functions, 'move' );

      span {
        background: inherit;
        -webkit-text-fill-color: transparent;
        -webkit-background-clip: text;
        font-weight: bold;
        bottom: 100%;
        line-height: 1.5;
        pointer-events: auto;
        position: absolute;
      }

      @each $number in 1, 2, 3, 4, 5, 6, 7 {
        &:nth-of-type(#{$number}) {
          grid-column: #{$number + 1};
        }
      }
    }

    thead [scope="col"] {
      --position: calc(var(--value, 0) / var(--scale, 100) * 100%);

      &::before {
        background-blend-mode: hard-light;
        background-position: 0% var(--position), center;
        background-size: 100% var(--size), 1rem;
        content: "";
        display: inline-block;
        height: $gutter;
        position: relative;
        transform: translate3d(-.2rem, .1rem, 0);
        width: $gutter;
        z-index: 1;
      }

      &::after {
        background-color: palette( default, secondary );
        background-image: url( map-get( $patterns, 'stripes' ) );
        background-blend-mode: exclusion;
        bottom: #{$gutter * 4};
        content: "";
        mix-blend-mode: multiply;
        opacity: 0;
        position: absolute;
        transition: opacity .3s map-get( $timing-functions, 'move' );
        top: $gutter;
        width: var(--width);
        z-index: 0;
      }

      &:hover::after {
        opacity: .5;
      }

      @each $number in 1, 2, 3, 4, 5, 6 {
        &:nth-child(#{$number + 1})::after {
          left: calc(1em + (var(--width) * #{$number}) + (var(--gap) * #{$number}));
        }
      }
    }

    @each $name, $pattern in $patterns {
      $i: index($patterns, ($name $pattern));

      tbody td:nth-of-type(#{$i}n + #{$i}),
      thead [scope="col"]:nth-of-type(#{$i + 1}n + #{$i + 1})::before {
        background-image:
          linear-gradient(to top,
            palette( success, dark ),
            palette( dominant ),
            palette( secondary ),
            palette( accent ),
            palette( alert )
          ),
          url($pattern);
      }
    }

    /**
     * @note Custom color palette for WHCM
     * @note Inspired by Greg Whitworth's post
     * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
     */
    @media screen and (-ms-high-contrast: active) {
      @each $name, $pattern in $patterns {
        $i: index($patterns, ($name $pattern));

        tbody td:nth-of-type(#{$i}n + #{$i}),
        thead [scope="col"]:nth-of-type(#{$i + 1}n + #{$i + 1})::before {
          background-image:
            linear-gradient(to top,
              Window,
              ButtonFace,
              ButtonShadow,
              ButtonText,
              highlight
            ),
            url($pattern);
        }
      }
    }
  }

  &.multi {
    grid-template-rows: repeat(var(--scale, 100), minmax(0, .25rem)) repeat(2, minmax(min-content, 2rem));

    tbody th {
      grid-row: -6 / -4;
    }

    thead tr * {
      grid-row: -2;
      grid-column: 1;

      @each $number in 2, 3, 4, 5, 6 {
        &:nth-of-type(#{$number}) {
          grid-column: #{$number * 2} / span 2;
        }
      }
    }

    thead tr + tr * {
      grid-row: -3;

      @each $number in 2, 3, 4, 5, 6, 7, 8, 9, 10 {
        &:nth-of-type(#{$number}) {
          grid-column: #{$number};
        }
      }
    }

    thead [scope="col"] {
      --position: calc(var(--value, 0) / var(--scale, 100) * 100%);

      &::before {
        background-blend-mode: hard-light;
        background-position: 0% var(--position), center;
        background-size: 100% var(--size), 1rem;
        content: "";
        display: inline-block;
        height: $gutter;
        position: relative;
        transform: translate3d(-.2rem, .1rem, 0);
        width: $gutter;
        z-index: 1;
      }

      &::after {
        background-color: palette( default, secondary );
        background-image: url( map-get( $patterns, 'stripes' ) );
        background-blend-mode: exclusion;
        bottom: #{$gutter * 4};
        content: "";
        mix-blend-mode: multiply;
        opacity: 0;
        position: absolute;
        transition: opacity .3s map-get( $timing-functions, 'move' );
        top: $gutter;
        width: var(--width);
        z-index: 0;
      }

      &:hover::after {
        opacity: .5;
      }

      @each $number in 1, 2, 3, 4, 5, 6 {
        &:nth-child(#{$number + 1})::after {
          left: calc(1em + (var(--width) * #{$number}) + (var(--gap) * #{$number}));
        }
      }
    }
  }
}
