/* ==================== */
/* == Pie Charts
 **
 * @note
 * 1. SVG patterns inline coming from:
 ** @see http://www.heropatterns.com/
/* ==================== */

.charts-pie {
  align-items: flex-end;
  background-color: inherit;
  display: flex;
  flex-wrap: wrap;
  justify-content: center;
  margin: 0 auto;
  position: relative;

  dt,
  dd {
    color: var(--color, currentColor);
    position: relative;
    z-index: 2;
  }

  dt + dd {
    padding: 0 $gutter 0 $gutter / 4;
  }

  dd[role="presentation"] {
    display: none;
  }
}

@supports (--color: currentColor) {
  .charts-pie dt::before {
    background: currentColor;
    content: "";
    display: inline-block;
    height: 1rem;
    transform: translate3d(-.2rem, .1rem, 0);
    width: 1rem;
  }
}

@supports (--position: calc(var(--start, 0) * .01turn)) {
  @media screen and (min-width: em(480)) {
    .charts-pie {
      padding-top: calc(#{$width / 2} - #{$gutter * 2});

      &::after {
        content: "";
        background: inherit;
        clip-path: circle(var(--offset, 5rem));
        height: calc(#{$width / 2} - #{$gutter * 2});
        left: 50%;
        margin: auto;
        position: absolute;
        top: 50%;
        transform: translate3d(-50%, -50%, 0);
        width: calc(#{$width / 2} - #{$gutter * 2});
      }

      + figcaption {
        text-align: center;
      }

      dd[role="presentation"] {
        --position: calc(var(--start, 0) * .01turn);
        clip-path: circle(50% at 0% 50%);
        display: block;
        height: 100%;
        left: 50%;
        overflow: hidden;
        position: absolute;
        top: 0;
        transform: rotate(var(--position));
        transform-origin: left center;
        transition: transform .2s ease-in-out;
        width: calc(#{$width / 4} - #{$gutter * 2});

        &::before {
          --position: calc(var(--value, 0) * .01turn + 1deg);
          background-color: var(--color, currentColor);
          content: "";
          height: inherit;
          left: -100%;
          position: inherit;
          top: 0;
          transform: rotate(var(--position));
          transform-origin: right center;
          width: 100%;
        }
      }

      dd:hover + dd[role="presentation"],
      dt:hover + dd + dd[role="presentation"] {
        transform: rotate(var(--position)) scale(1.05);
      }

      @each $name, $pattern in $patterns {
        $i: index($patterns, ($name $pattern));

        dt:nth-of-type(#{$i})::before,
        dt:nth-of-type(#{$i}) + * + dd[role="presentation"]::before  {
          background-image: url($pattern); /* 1 */
          background-blend-mode: soft-light;
        }
      }
    }

    .charts-pie.no-donut::after {
      display: none;
    }

    .charts-pie.polar {
      dd[role="presentation"] {
        --scale: calc(var(--value) / 50);
        transform: rotate(var(--position)) scale(var(--scale));
      }

      dd:hover + dd[role="presentation"],
      dt:hover + dd + dd[role="presentation"] {
        --scale: calc(var(--value) / 50 * (1 + (50 - var(--value)) / 100));
        transform: rotate(var(--position)) scale(var(--scale));
      }
    }
  }

  @media screen and (-ms-high-contrast: active) and (min-width: em(480)) {
    .charts-pie {
      dt::before,
      dt + * + dd[role="presentation"]::before {
        background-color: Window;
      }

      dt:nth-of-type(odd)::before,
      dt:nth-of-type(odd) + * + dd[role="presentation"]::before {
        background-color: WindowText;
      }
    }
  }
}
