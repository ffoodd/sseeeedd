/* ==================== */
/* == Pie Charts
 **
 * @note SVG patterns inline coming from:
 * @link http://www.heropatterns.com/
/* ==================== */
/** Pie charts */
@supports (--position: calc(var(--start, 0) * .01turn)) {
  &.pie {
    margin: 0 auto;
    padding-top: calc(#{$width / 2} - #{$gutter * 2});
    position: relative;

    tbody {
      display: table-row;
    }

    tbody tr {
      display: table-cell;
      transition: opacity .3s map-get( $timing-functions, 'move' );
    }

    tbody th {
      padding-right: $gutter / 2;

      &::before {
        background: var(--color, currentColor);
        content: "";
        display: inline-block;
        height: $gutter;
        transform: translate3d(-.2rem, .1rem, 0);
        width: $gutter;
      }
    }

    /**
     * @note Pie chart based on:
     * @link https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/
     * @author Lea Verou
     */
    span {
      --position: calc(var(--start, 0) * .01turn);
      --zoom: .75;
      clip-path: circle(50% at 0% 50%);
      display: block;
      height: 100%;
      left: 50%;
      overflow: hidden;
      pointer-events: none;
      position: absolute;
      top: $gutter * -4;
      transform:
        rotate(var(--position))
        scale(var(--zoom));
      transform-origin: left center;
      transition: transform .2s map-get( $timing-functions, 'move' );
      width: $width / 2;

      &.over-50 {
        background-color: var(--color, currentColor);
        overflow: visible;
      }

      &::before {
        --position: calc(var(--value, 0) * .01turn);
        background-color: var(--color, currentColor);
        content: "";
        display: initial;
        height: 100%;
        left: -100%;
        margin: initial;
        pointer-events: auto;
        position: inherit;
        top: 0;
        transform: rotate(var(--position));
        transform-origin: right center;
        width: 100%;
      }
    }

    tr:hover span {
      --zoom: .8;
    }

    @each $name, $pattern in $patterns {
      $i: index($patterns, ($name $pattern));

      tr:nth-child(#{$i}n + #{$i}) .over-50,
      tr:nth-child(#{$i}n + #{$i}) th::before,
      tr:nth-child(#{$i}n + #{$i}) span::before  {
        background-image: url($pattern); /* 1 */
      }
    }

    tbody:hover tr {
      opacity: .75;

      &:hover {
        opacity: 1;
      }
    }
  }

  /**
   * Using mask-image to make a Donut
   *
   * @note Based on Ana Tudor's work
   * @link https://css-tricks.com/1-html-element-5-css-properties-magic/
   * @author Ana Tudor
   *
   * @note Mask support:
   * @link https://caniuse.com/#search=mask
   */
  @supports (mask: var(--mask)) {
       &.donut {
         mask-image: radial-gradient(
           circle at 50% calc(50% - #{$gutter * 2.5}),
           transparent 0%,
           transparent var(--offset),
           palette( default, contrast) calc(var(--offset) + 1px),
           palette( default, contrast) 100%
         );
       }
   }

  /**
   * @note Custom color palette for WHCM
   * @note Inspired by Greg Whitworth's post
   * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
   */
  @media screen and (-ms-high-contrast: active) {
    &.pie {
      th::before,
      span::before {
        background-color: Window;
      }

      tr:nth-of-type(odd) th::before,
      tr:nth-of-type(odd) span::before {
        background-color: WindowText;
      }
    }
  }
}
