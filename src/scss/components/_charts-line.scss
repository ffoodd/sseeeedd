/* ==================== */
/* == Line Charts
 *
 * @note Grid charts based on
 * @see https://css-tricks.com/css-charts-grid-custom-properties/
 * @author Miriam Suzanne
 *
 * @note Massively using clip-path
 * @see Bennett Feely's clippy to understand polygon() syntax
 * @link http://bennettfeely.com/clippy/
 */
 /** Line charts
  * @note 1. calc() in width doesn't work in Firefoxâ€¦
  */
 @supports (clip-path: polygon(0% calc(100% - (var(--1) * 100% / var(--y))))) {
   &.line {
     --offset: calc( ( 100% / var(--x) ) / 2);
     --height: calc( #{$width / 2} - #{$gutter * 2} );
     --bottom: calc( 100% - var(--height) );
     padding: var(--height) 0 $gutter;
     position: relative;
     transition:
       background .3s map-get( $timing-functions, 'move' ),
       color .3s map-get( $timing-functions, 'move' );

     &::after {
       --scale: calc( ( 100% - (var(--y) * 1px) ) / var(--y) );
       background:
         repeating-linear-gradient(
           to bottom,
           white, white var(--scale),
           rgba(0, 0, 0, .25) calc(var(--scale) + 1px)
         );
       bottom: var(--bottom);
       content: "";
       position: absolute;
       top: 0;
       width: 100%;
       z-index: 1;
     }

     tr[style]::before {
       bottom: var(--bottom);
       background: linear-gradient(to top, palette( secondary, light ), palette( alert ) 75%);
       clip-path: polygon(
         0% calc(100% - (var(--1) / var(--y) * 100%)),
         var(--offset) calc(100% - (var(--1) / var(--y) * 100%)),
         calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),
         calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),
         calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),
         calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),
         calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),
         calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),
         calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),
         calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),
         calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),
         calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),
         calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
         100% calc(100% - (var(--12) / var(--y) * 100%)),
         100% 100%,
         0% 100%
       );
       content: "";
       position: absolute;
       top: 0;
       width: 100%;
       z-index: 2;
     }

     th,
     td {
       background: palette( default, contrast );
       font-weight: bold;
       text-align: center;
       width: calc( 100% / var(--x) );
       width: 8.3%; /* 1 */

       &:hover {
         color: palette( secondary );
       }
     }

     th {
       &::after {
         background-color: palette( default, contrast );
         background-image: url( map-get( $patterns, 'stripes' ) );
         background-blend-mode: exclusion;
         bottom: $gutter * 4;
         content: "";
         height: calc(100% - #{$gutter * 4});
         mix-blend-mode: soft-light;
         opacity: 0;
         position: absolute;
         transition: opacity .3s map-get( $timing-functions, 'move' );
         width: inherit;
         z-index: 3;
       }

       @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {
         &:nth-child(#{$number + 1})::after {
           left: calc(100% / var(--x) * #{$number - 1});
         }
       }

       &:hover::after {
         opacity: .75;
       }
     }

     td {
       line-height: 1.5;
     }

     &.points {
         tr[style] {
             &::before {
               clip-path: polygon(
                 0% calc(100% - (var(--1) / var(--y) * 100%)),
                 var(--offset) calc(100% - (var(--1) / var(--y) * 100%)),
                 calc((100% / var(--x) * 1) + var(--offset)) calc(100% - (var(--2) / var(--y) * 100%)),
                 calc((100% / var(--x) * 2) + var(--offset)) calc(100% - (var(--3) / var(--y) * 100%)),
                 calc((100% / var(--x) * 3) + var(--offset)) calc(100% - (var(--4) / var(--y) * 100%)),
                 calc((100% / var(--x) * 4) + var(--offset)) calc(100% - (var(--5) / var(--y) * 100%)),
                 calc((100% / var(--x) * 5) + var(--offset)) calc(100% - (var(--6) / var(--y) * 100%)),
                 calc((100% / var(--x) * 6) + var(--offset)) calc(100% - (var(--7) / var(--y) * 100%)),
                 calc((100% / var(--x) * 7) + var(--offset)) calc(100% - (var(--8) / var(--y) * 100%)),
                 calc((100% / var(--x) * 8) + var(--offset)) calc(100% - (var(--9) / var(--y) * 100%)),
                 calc((100% / var(--x) * 9) + var(--offset)) calc(100% - (var(--10) / var(--y) * 100%)),
                 calc((100% / var(--x) * 10) + var(--offset)) calc(100% - (var(--11) / var(--y) * 100%)),
                 calc((100% / var(--x) * 11) + var(--offset)) calc(100% - (var(--12) / var(--y) * 100%)),
                 100% calc(100% - (var(--12) / var(--y) * 100%)),
                 100% calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),
                 calc((100% / var(--x) * 11) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--12) / var(--y) * 100%)),
                 calc((100% / var(--x) * 10) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--11) / var(--y) * 100%)),
                 calc((100% / var(--x) * 9) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--10) / var(--y) * 100%)),
                 calc((100% / var(--x) * 8) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--9) / var(--y) * 100%)),
                 calc((100% / var(--x) * 7) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--8) / var(--y) * 100%)),
                 calc((100% / var(--x) * 6) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--7) / var(--y) * 100%)),
                 calc((100% / var(--x) * 5) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--6) / var(--y) * 100%)),
                 calc((100% / var(--x) * 4) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--5) / var(--y) * 100%)),
                 calc((100% / var(--x) * 3) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--4) / var(--y) * 100%)),
                 calc((100% / var(--x) * 2) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--3) / var(--y) * 100%)),
                 calc((100% / var(--x) * 1) + var(--offset)) calc((100% + #{$gutter / 4}) - (var(--2) / var(--y) * 100%)),
                 var(--offset) calc((100% + #{$gutter / 4}) - (var(--1) / var(--y) * 100%)),
                 0% calc((100% + #{$gutter / 4}) - (var(--1) / var(--y) * 100%))
               );
             }

         
           td {
               &::before {
                 --size: #{$gutter};
                 background-image: linear-gradient(to bottom, palette( secondary, light ) 40%, palette( alert ) 90%);
                 background-position-x: 0;
                 background-position-y: var(--top, 100);
                 background-size: 100% calc(var(--y) * 200%);
                 border: 2px solid palette( default, contrast );
                 border-radius: 50%;
                 box-shadow: 0 0 #{$gutter / 4} rgba(0, 0, 0, .5);
                 content: "";
                 height: var(--size);
                 position: absolute;
                 top: var(--top, 100);
                 transform: translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0);
                 transition: transform .3s map-get( $timing-functions, 'move' );
                 width: var(--size);
                   will-change: transform;
                 z-index: 4;
               }

               @each $number in 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12 {
                 &:nth-of-type(#{$number})::before {
                   --top: calc( (var(--height) - ( var(--#{$number}) / var(--y) * var(--height) ) ) );
                   left: calc( ( 100% / var(--x) * #{$number - 1} ) + var(--offset) );
                 }
               }

               &:hover::before {
                 transform: 
                     translate3d(calc(var(--size) / -2), calc(var(--size) / -2), 0) 
                     scale(1.5);
               }
             }
         }
         
         th {
           &::after {
             mix-blend-mode: multiply;
           }

           &:hover::after {
            opacity: .5;
           }
         }
       }
     }
   }

   /**
    * @note Custom color palette for WHCM
    * @note Inspired by Greg Whitworth's post
    * @link http://www.gwhitworth.com/blog/2017/04/how-to-use-ms-high-contrast
    */
   @media screen and (-ms-high-contrast: active) {
     &.line tr[style]::before {
       background: linear-gradient(to top, ButtonHighlight, Highlight 75%);
     }
   }
