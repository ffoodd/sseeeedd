@use "sass:math";

@use "sass:meta";
@use "sass:string";
// ----------------------------- */
// == Functions
// ----------------------------- */
// Override Sass hsl() function
// @note WTF? Need to override Sass function to use native CSS function /!\
// @author Dan Eden
// @see https://github.com/sass/sass/issues/469#issuecomment-77290544
@function hsl($color) {
	@return string.unquote('hsl(#{$color})');
}

@function hsla($color, $opacity) {
	@return string.unquote('hsla(#{$color}, #{$opacity})');
}

// em conversion
// @note Found in Marie Guillaumet's Gists
// @author Marie Guillaumet
// @see https://twitter.com/kReEsTaL
// @see http://marieguillaumet.com/
// @see https://gist.github.com/ijy/1441967
@function em( $f, $base: 16 ) {
	$everything-okay: true;

	@if meta.type-of( $f ) != number {
		@warn "Biip ! `{$s}` is not a valid number.";
		$everything-okay: false;
	}

	@if $everything-okay == true {
		@if $f == 0 {
			@return 0
		}
		@return math.div($f, $base) * 1em;
	}
}

// rem conversion
@function rem( $f, $base: 16 ) {
	$everything-okay: true;

	@if meta.type-of( $f ) != number {
		@warn "Biip ! `{$s}` is not a valid number.";
		$everything-okay: false;
	}

	@if $everything-okay == true {
		@if $f == 0 {
			@return 0
		}
		@return math.div($f, $base) * 1rem;
	}
}


// Replace `$search` with `$replace` in `$string`
// @author Kitty Giraudel
// @param {String} $string - Initial string
// @param {String} $search - Substring to replace
// @param {String} $replace ('') - New value
// @return {String} - Updated string
// @see https://www.sassmeister.com/gist/1b4f2da5527830088e4d
@function str-replace($string, $search, $replace: '') {
	$index: string.index($string, $search);

	@if $index {
		@return string.slice($string, 1, $index - 1) + $replace + str-replace(string.slice($string, $index + string.length($search)), $search, $replace);
	}

	@return $string;
}


// Convert value to string
// @author Kitty Giraudel
// @see https://kittygiraudel.com/2014/01/27/casting-types-in-sass/
@function to-string($value) {
	@return meta.inspect($value);
}
