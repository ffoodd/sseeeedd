/*! normalize.css v7.0.0 | MIT License | github.com/necolas/normalize.css */html{line-height:1.15;-ms-text-size-adjust:100%;-webkit-text-size-adjust:100%}body{margin:0}aside,footer,header,nav{display:block}h1{font-size:2em;margin:0.67em 0}figcaption,figure,main{display:block}figure{margin:1em 40px}a{background-color:transparent;-webkit-text-decoration-skip:objects}abbr[title]{border-bottom:none;text-decoration:underline;text-decoration:underline dotted}strong{font-weight:inherit}strong{font-weight:bolder}mark{background-color:#ff0;color:#000}small{font-size:80%}img{border-style:none}button,input,select,textarea{font-family:sans-serif;font-size:100%;line-height:1.15;margin:0}button,input{overflow:visible}button,select{text-transform:none}button,[type="reset"]{-webkit-appearance:button}button::-moz-focus-inner,[type="reset"]::-moz-focus-inner{border-style:none;padding:0}button:-moz-focusring,[type="reset"]:-moz-focusring{outline:1px dotted ButtonText}fieldset{padding:0.35em 0.75em 0.625em}legend{box-sizing:border-box;color:inherit;display:table;max-width:100%;padding:0;white-space:normal}textarea{overflow:auto}[type="checkbox"],[type="radio"]{box-sizing:border-box;padding:0}::-webkit-file-upload-button{-webkit-appearance:button;font:inherit}/*! system-font.css v1.0.0 | CC0-1.0 License | github.com/jonathantneal/system-font-face */@font-face{font-family:system;font-style:normal;font-weight:300;src:local(".SFNSText-Light"),local(".HelveticaNeueDeskInterface-Light"),local(".LucidaGrandeUI"),local("Ubuntu Light"),local("Segoe UI Light"),local("Roboto-Light"),local("DroidSans"),local("Tahoma")}@font-face{font-family:system;font-style:italic;font-weight:300;src:local(".SFNSText-LightItalic"),local(".HelveticaNeueDeskInterface-Italic"),local(".LucidaGrandeUI"),local("Ubuntu Light Italic"),local("Segoe UI Light Italic"),local("Roboto-LightItalic"),local("DroidSans"),local("Tahoma")}@font-face{font-family:system;font-style:normal;font-weight:400;src:local(".SFNSText-Regular"),local(".HelveticaNeueDeskInterface-Regular"),local(".LucidaGrandeUI"),local("Ubuntu"),local("Segoe UI"),local("Roboto-Regular"),local("DroidSans"),local("Tahoma")}@font-face{font-family:system;font-style:italic;font-weight:400;src:local(".SFNSText-Italic"),local(".HelveticaNeueDeskInterface-Italic"),local(".LucidaGrandeUI"),local("Ubuntu Italic"),local("Segoe UI Italic"),local("Roboto-Italic"),local("DroidSans"),local("Tahoma")}@font-face{font-family:system;font-style:normal;font-weight:500;src:local(".SFNSText-Medium"),local(".HelveticaNeueDeskInterface-MediumP4"),local(".LucidaGrandeUI"),local("Ubuntu Medium"),local("Segoe UI Semibold"),local("Roboto-Medium"),local("DroidSans-Bold"),local("Tahoma Bold")}@font-face{font-family:system;font-style:italic;font-weight:500;src:local(".SFNSText-MediumItalic"),local(".HelveticaNeueDeskInterface-MediumItalicP4"),local(".LucidaGrandeUI"),local("Ubuntu Medium Italic"),local("Segoe UI Semibold Italic"),local("Roboto-MediumItalic"),local("DroidSans-Bold"),local("Tahoma Bold")}@font-face{font-family:system;font-style:normal;font-weight:700;src:local(".SFNSText-Bold"),local(".HelveticaNeueDeskInterface-Bold"),local(".LucidaGrandeUI"),local("Ubuntu Bold"),local("Roboto-Bold"),local("DroidSans-Bold"),local("Segoe UI Bold"),local("Tahoma Bold")}@font-face{font-family:system;font-style:italic;font-weight:700;src:local(".SFNSText-BoldItalic"),local(".HelveticaNeueDeskInterface-BoldItalic"),local(".LucidaGrandeUI"),local("Ubuntu Bold Italic"),local("Roboto-BoldItalic"),local("DroidSans-Bold"),local("Segoe UI Bold Italic"),local("Tahoma Bold")}button,input,select,textarea{line-height:1.5}label,input[type="reset"],button{cursor:pointer}form [disabled],form [readonly]{cursor:not-allowed}label,.label,button,input,select{vertical-align:middle}input,button,select,textarea{padding:.5em;border-radius:.25em;font-family:inherit;font-size:1em}form input[type="text"],form input[type="file"],form textarea,form select,.fieldset input[type="text"],.fieldset input[type="file"],.fieldset textarea,.fieldset select{width:100%}::-ms-clear{display:none}@media screen and (-webkit-min-device-pixel-ratio: 1.5){input[type="text"],input[type="file"],textarea,select{font-size:1em}}fieldset,.fieldset{margin-bottom:1em;padding:0;border:none}@media screen and (min-width: 48.0625em){fieldset,.fieldset{margin-right:auto;margin-left:auto;max-width:37.5em}}.fieldset>div{margin-bottom:1em}legend{margin-bottom:1em;font-weight:bold}::-webkit-input-placeholder{color:#a9a9a9}::-moz-placeholder{color:#a9a9a9;opacity:1}:-ms-input-placeholder{color:#a9a9a9}label,.label{display:block}input[type="checkbox"]+label,input[type="radio"]+label{display:inline-block}input[type="text"],input[type="file"],textarea,select{border:1px solid rgba(68,68,68,0.2);background-color:#fff}input[type="text"]:focus,input[type="file"]:focus,textarea:focus,select:focus{box-shadow:0 0 5px rgba(68,68,68,0.25);border:1px solid rgba(68,68,68,0.5)}input[type="checkbox"],input[type="radio"]{width:auto;border:0;background-color:transparent}input[type="text"],input[type="file"],textarea,input[type="reset"],button{-webkit-appearance:none;-moz-appearance:none}input[type="checkbox"]:focus,input[type="radio"]:focus{outline:1px dotted}.toggle-field{position:relative;display:inline-block;width:2.5em;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none}.toggle-field+.label{display:inline-block}.toggle-label{overflow:hidden;padding:0;height:1.5625em;line-height:1.5625em;border:2px solid transparent;border-radius:.25em;background-color:rgba(68,68,68,0.25);text-indent:100%;transition:all .3s ease-in}input[type="checkbox"]+.toggle-label{display:block}.toggle-label:before{content:"";position:absolute;top:0;bottom:0;display:block;margin:0;width:1.5em;right:1em;border:2px solid rgba(68,68,68,0.25);border-radius:.25em;background:#fff;transition:all .3s ease-in 0s}.toggle-input:checked+.toggle-label{background-color:#639;border-color:#639}.toggle-input:checked+.toggle-label:before{right:0;border-color:#639}textarea{vertical-align:top;resize:vertical}input[type="reset"],button{margin:.5em 0;width:auto;border:1px solid #639;background-color:#639;color:#fff}input[type="reset"]:hover,input[type="reset"]:focus,button:hover,button:focus{border:1px solid rgba(102,51,153,0.75);background-color:rgba(102,51,153,0.75)}input[type="reset"]{border:1px solid #639;background-color:#fff;color:#639}input[type="reset"]:hover,input[type="reset"]:focus{border:1px solid rgba(102,51,153,0.75);background-color:#fff;color:rgba(102,51,153,0.75)}label [class^="label-msg"]{display:block;margin:-.25em 0 .25em 0;font-size:.9em}.label-msg-help{color:gray}.label-msg-error{color:#ff4500}html[lang]{box-sizing:border-box;overflow-y:scroll;overflow:-moz-scrollbars-vertical;position:relative}*,*::after,*::before{box-sizing:inherit}body{background:whitesmoke;color:#444;counter-reset:footnotes;font:normal 400 1em/1.5 system;overflow-x:hidden;position:relative;-webkit-font-smoothing:subpixel-antialiased;text-rendering:optimizeSpeed}::-moz-selection{background-color:dodgerblue;color:whitesmoke;text-shadow:none}::selection{background-color:dodgerblue;color:whitesmoke;text-shadow:none}a{text-decoration:underline;color:#639}@supports ((-webkit-text-decoration-skip: ink) or (text-decoration-skip: ink)){a{-webkit-text-decoration-skip:ink;text-decoration-skip:ink}}@supports not ((-webkit-text-decoration-skip: ink) or (text-decoration-skip: ink)){}a:hover,a:focus{color:indigo}a:active,a:visited{opacity:.75}main{margin:0 auto;outline:none}.sr-only,.toggle-input{border:0 !important;clip:rect(1px, 1px, 1px, 1px) !important;-webkit-clip-path:inset(50%) !important;clip-path:inset(50%) !important;height:1px !important;overflow:hidden !important;padding:0 !important;position:absolute !important;width:1px !important;white-space:nowrap !important}.sr-only-focusable:focus,.sr-only-focusable:active{clip:auto !important;-webkit-clip-path:none !important;clip-path:none !important;height:auto !important;overflow:visible !important;width:auto !important;white-space:normal !important}p,ul,ol,td,th,caption{font-size:1em;line-height:1.5;margin:1.5em 0}h1,h2,h3,h4,h5,h6,th,blockquote footer,strong,cite{color:black;font-weight:700;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;text-rendering:optimizelegibility}h1{color:dodgerblue;font-size:2.875em;line-height:1.0434;margin:1.04348em 0 .52174em}h1::first-line{color:#444}h2{color:#639;font-size:2.5em;line-height:1.2;margin:1.2em 0 .6em}h3{color:#444;font-size:2.25em;line-height:1.3334;margin:1.33333em 0 .66667em}h4{font-size:1.875em;line-height:1.6;margin:1.6em 0 .8em}h5{font-size:1.625em;line-height:1.8462;margin:1.84615em 0 .92308em}h6,th{font-size:1.375em;line-height:1.0909;margin:2.18182em 0 1.09091em}textarea,table,td,th,div,p{word-wrap:break-word;-webkit-hyphens:auto;-ms-hyphens:auto;hyphens:auto}blockquote{font-size:1em;font-style:italic;line-height:1.5;margin:3em 0 1.5em;max-width:100%;padding-left:7em;position:relative;quotes:"«\00A0" "\00A0»";z-index:2}blockquote::before{color:#a9a9a9;content:open-quote;font-size:10em;font-weight:700;left:0;line-height:0;opacity:.25;position:absolute;top:0;z-index:-1}blockquote footer{font-style:normal}abbr[title]{border-bottom:1px dotted;cursor:help;text-decoration:none;text-transform:uppercase}small{color:gray;font-size:.875em}cite{color:#639;font-style:normal}img[alt]{display:inline-block;max-width:100%;position:relative;vertical-align:middle}img[alt]:not([src$=".svg"]){min-height:4em;height:auto}img[alt]::after{background:white;bottom:0;content:attr(alt) "\a" "— " attr(src);left:0;padding:.5em;position:absolute;top:0;width:100%;white-space:pre-wrap}figure[role="group"]{background:white;margin:1.5rem auto;max-width:-webkit-min-content;max-width:-moz-min-content;max-width:min-content;padding:1em}figure[role="group"] figcaption{display:block;font-size:.875em;padding:1em 0}figure[role="group"] img[alt]{max-width:none}table{border-collapse:collapse;caption-side:top;display:inline-block;margin-bottom:1.5rem;max-width:100%;overflow-x:auto;vertical-align:top;white-space:nowrap}table>caption:first-child{font-style:italic;margin:0;padding:2.5em 1em}th,td{padding:.5rem .75rem;text-align:left}thead th,tbody td{border-bottom:1px solid whitesmoke}td{line-height:1.25;max-width:100%}tbody{border:1px solid whitesmoke}tbody tr>*+*{border-left:1px solid whitesmoke}@media only screen and (max-width: 48em){table{background:radial-gradient(ellipse at left, rgba(0,0,0,0.2) 0%, transparent 75%) 0 center,radial-gradient(ellipse at right, rgba(0,0,0,0.2) 0%, transparent 75%) 100% center;background-attachment:scroll, scroll;background-color:#fff;background-repeat:no-repeat;background-size:.625em 100%,.625em 100%;border:1px solid whitesmoke;max-width:100% !important;-webkit-overflow-scrolling:touch}table>caption:first-child{background-image:linear-gradient(to left, #fff 50%, rgba(255,255,255,0) 100%),linear-gradient(to right, #fff 50%, rgba(255,255,255,0) 100%);background-repeat:no-repeat;background-position:100% 0, 0 0;background-size:1.25em 100%,1.25em 100%;border-bottom:1px solid whitesmoke}td:first-child,th:first-child{background-image:linear-gradient(to right, #fff 50%, rgba(255,255,255,0) 100%);background-repeat:no-repeat;background-size:1.25em 100%}td:last-child,th:last-child{background-image:linear-gradient(to left, #fff 50%, rgba(255,255,255,0) 100%);background-repeat:no-repeat;background-position:100% 0;background-size:1.25em 100%}}@media only screen and (min-width: 48em){table{caption-side:bottom;display:table;table-layout:fixed;width:100%}th,td{padding:0.75em 1.375rem}tbody td{background:rgba(255,255,255,0.5)}tbody tr:nth-child(odd){background:whitesmoke}}form>*+*{margin-top:2rem}[type="radio"]:not(:first-of-type),[type="checkbox"]:not(:first-of-type){margin-left:.5em}body>*{max-width:60em;margin:0 auto}nav ul{display:-webkit-box;display:flex;list-style:none;padding:0}nav a{padding:.5em 1em}@supports ((-webkit-text-decoration-skip: ink) or (text-decoration-skip: ink)){}@supports not ((-webkit-text-decoration-skip: ink) or (text-decoration-skip: ink)){}

/*# sourceMappingURL=data:application/json;charset=utf8;base64, */
